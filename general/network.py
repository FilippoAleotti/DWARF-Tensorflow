'''
Base network

Author: Filippo Aleotti
Mail: filippo.aleotti2@unibo.it
'''

from abc import ABCMeta, abstractmethod
import tensorflow as tf

class GeneralNetwork(object, metaclass=ABCMeta):
    def __init__(self, params, inputs):
        ''' Prepare the network and create the graph'''
        self.params = params
        self.inputs = inputs
        self.model_name = self.params['experiment']['network_name']
        self.training= self.params['experiment']['mode'] == 'training'
        self.setup_network()

    def setup_network(self):
        ''' Build the model, the losses and the summaries '''
        with tf.variable_scope(self.model_name):
            self.build_model()
            self.build_outputs()

            if self.training is True:
                self.build_losses()
                self.build_summaries()

    @abstractmethod
    def build_model(self):
        ''' Network specification''' 
        pass

    @abstractmethod
    def build_outputs(self):
        ''' Output generated by the network. '''
        pass

    @abstractmethod
    def build_losses(self):
        ''' Losses used by the network. 
            Remeber to increment self.total_loss
        '''
        pass

    def build_summaries(self):
        ''' Summaries'''
        tf.summary.scalar('total_loss', self.total_loss)